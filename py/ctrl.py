#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.0 on Sat May  9 17:26:17 2015
#

import wx
import threading
import time
from socket import *

import adc1785

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade

HOST='192.168.1.120'
MSGPORT=4000
DATAPORT=4001
CTRLPORT=4002

class ctrlFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: ctrlFrame.__init__
        wx.Frame.__init__(self, *args, **kwds)
        self.devList = wx.Notebook(self, wx.ID_ANY)
        self.devPanel = wx.Panel(self.devList, wx.ID_ANY)
        self.output0 = wx.TextCtrl(self, wx.ID_ANY, _("ctrlMsg"), style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
        self.input0 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_PROCESS_ENTER)
        self.button_Load = wx.Button(self, wx.ID_ANY, _("Load"))
        self.button_Conf = wx.Button(self, wx.ID_ANY, _("Conf"))
        self.button_Prep = wx.Button(self, wx.ID_ANY, _("Prep"))
        self.button_Star = wx.Button(self, wx.ID_ANY, _("Star"))
        self.button_Paus = wx.Button(self, wx.ID_ANY, _("Paus"))
        self.button_unLoad = wx.Button(self, wx.ID_ANY, _("unLoad"))
        self.button_unConf = wx.Button(self, wx.ID_ANY, _("unConf"))
        self.button_End = wx.Button(self, wx.ID_ANY, _("End"))
        self.button_Stop = wx.Button(self, wx.ID_ANY, _("Stop"))
        self.button_Resu = wx.Button(self, wx.ID_ANY, _("Resu"))
        self.socket = -1

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.sendMsg, self.input0)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=0: self.sendCmd(evt, cmdId), self.button_Load)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=2: self.sendCmd(evt, cmdId), self.button_Conf)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=4: self.sendCmd(evt, cmdId), self.button_Prep)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=5: self.sendCmd(evt, cmdId), self.button_Star)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=6: self.sendCmd(evt, cmdId), self.button_Paus)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=1: self.sendCmd(evt, cmdId), self.button_unLoad)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=3: self.sendCmd(evt, cmdId), self.button_unConf)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=7: self.sendCmd(evt, cmdId), self.button_End)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=10: self.sendCmd(evt, cmdId), self.button_Stop)
        self.Bind(wx.EVT_BUTTON, lambda evt, cmdId=9: self.sendCmd(evt, cmdId), self.button_Resu)
 
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: ctrlFrame.__set_properties
        self.SetTitle(_("daq ctrl"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: ctrlFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 5, 0, 0)
        self.devList.AddPage(self.devPanel, _("tab1"))
        sizer_1.Add(self.devList, 1, wx.ALL | wx.EXPAND, 0)
        sizer_1.Add(self.output0, 3, wx.ALL | wx.EXPAND, 1)
        sizer_1.Add(self.input0, 0, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.button_Load, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_Conf, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_Prep, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_Star, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_Paus, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_unLoad, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_unConf, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_End, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_Stop, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        grid_sizer_1.Add(self.button_Resu, 1, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 1)
        sizer_1.Add(grid_sizer_1, 0, wx.ALL | wx.EXPAND | wx.FIXED_MINSIZE, 0)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def sendMsg(self, event):  # wxGlade: ctrlFrame.<event_handler>
        print "Event handler 'sendMsg'"
        txt = event.GetEventObject()
        n = txt.GetNumberOfLines()
        if (n>=1) and (self.socket!=-1) :
            msg = txt.GetLineText(n)
            print "send msg %s to socket"%(msg)
            self.socket.send(msg.encode('utf8'))

        event.Skip()

    def sendCmd(self, event, cmdId):  # wxGlade: ctrlFrame.<event_handler>
        print "Event handler 'sendCmd'"
        #if cmdId==8 :
            #b = event.GetEventObject()
            #st = b.GetValue()
            #cmdId += st
        msg = "cmd#all#"+str(cmdId)
        self.socket.send(msg.encode('utf8'))
        event.Skip()

    def setSocket(self, s):
        self.socket = s

# end of class ctrlFrame


class switch(threading.Thread):
    def __init__(self, s, f, l):
        super(switch, self).__init__()
        self.socket = s
        self.frame = f
        self.devList = l

    def run(self):
        print "switch is running for "
        print self.devList
        while True :
            data = self.socket.recv(80)
            if data=='' :
                break
            print "%s"%(data)
            #if self.frame!=-1 :
                #txt = self.frame.output0
                #txt.AppendText(data)
        print "switch is finished."


class ctrlApp(wx.App):
    def OnInit(self):
        wx.InitAllImageHandlers()
        frame0 = ctrlFrame(None, wx.ID_ANY, "")
        self.frame1 = adc1785.devFrame(None, wx.ID_ANY, "")
        self.dev1 = adc1785.devApp("adc1785")
        self.frame1.setDev(self.dev1)
        self.dev1.setFrame(self.frame1)
        self.devList = []
        self.devList.append(self.dev1)

        self.addrMsg = (HOST, MSGPORT)
        self.socketMsg = socket(AF_INET, SOCK_STREAM)
        self.addrData = (HOST, DATAPORT)
        self.socketData = socket(AF_INET, SOCK_STREAM)
        self.addrCtrl = (HOST, CTRLPORT)
        self.socketCtrl = socket(AF_INET, SOCK_STREAM)

        self.thpool = []
        self.thpool.append(switch(self.socketMsg, frame0, self.devList))
        self.thpool.append(switch(self.socketData, -1, self.devList))

        frame0.setSocket(self.socketCtrl)
        self.SetTopWindow(frame0)
        frame0.Show()
        self.frame1.Show()

        return 1

    def start(self):
        self.socketMsg.connect(self.addrMsg)
        self.socketData.connect(self.addrData)
        self.socketCtrl.connect(self.addrCtrl)

        for th in self.thpool :
            th.start()

        return 1

    def stop(self):
        self.socketMsg.close()
        self.socketData.close()
        for th in self.thpool :
            th.join()

        return 1

    def OnExit(self):
        self.stop()
        if frame0!=None :
            frame0.Destroy()
        if self.frame1!=None :
            self.frame1.Destroy()

        return 1


# end of class ctrlApp

if __name__ == "__main__":
    gettext.install("ctrl0") # replace with the appropriate catalog name

    ctrl0 = ctrlApp(0)
    ctrl0.start()
    ctrl0.dev1.fillCh(0, 1000)
    ctrl0.MainLoop()
