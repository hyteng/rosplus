#!/usr/bin/env python
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 0.7.0 on Sat May  9 21:24:17 2015
#

import wx
import ROOT

# begin wxGlade: dependencies
import gettext
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class devFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: devFrame.__init__
        style = wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.RESIZE_BORDER
        wx.Frame.__init__(self, *args, **kwds)
        self.output0 = wx.TextCtrl(self, wx.ID_ANY, "", style=wx.HSCROLL | wx.TE_MULTILINE | wx.TE_READONLY)
        self.ch0_L = wx.ToggleButton(self, wx.ID_ANY, _("ch0_L"))
        self.ch1_L = wx.ToggleButton(self, wx.ID_ANY, _("ch1_L"))
        self.ch2_L = wx.ToggleButton(self, wx.ID_ANY, _("ch2_L"))
        self.ch3_L = wx.ToggleButton(self, wx.ID_ANY, _("ch3_L"))
        self.ch4_L = wx.ToggleButton(self, wx.ID_ANY, _("ch4_L"))
        self.ch5_L = wx.ToggleButton(self, wx.ID_ANY, _("ch5_L"))
        self.ch6_L = wx.ToggleButton(self, wx.ID_ANY, _("ch6_L"))
        self.ch7_L = wx.ToggleButton(self, wx.ID_ANY, _("ch7_L"))
        self.ch0_H = wx.ToggleButton(self, wx.ID_ANY, _("ch0_H"))
        self.ch1_H = wx.ToggleButton(self, wx.ID_ANY, _("ch1_H"))
        self.ch2_H = wx.ToggleButton(self, wx.ID_ANY, _("ch2_H"))
        self.ch3_H = wx.ToggleButton(self, wx.ID_ANY, _("ch3_H"))
        self.ch4_H = wx.ToggleButton(self, wx.ID_ANY, _("ch4_H"))
        self.ch5_H = wx.ToggleButton(self, wx.ID_ANY, _("ch5_H"))
        self.ch6_H = wx.ToggleButton(self, wx.ID_ANY, _("ch6_H"))
        self.ch7_H = wx.ToggleButton(self, wx.ID_ANY, _("ch7_H"))
        self.C = [-1 for i in range(16)]
        self.dev = -1
        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=0 :self.showCh(event, n), self.ch0_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=1 :self.showCh(event, n), self.ch1_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=2 :self.showCh(event, n), self.ch2_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=3 :self.showCh(event, n), self.ch3_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=4 :self.showCh(event, n), self.ch4_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=5 :self.showCh(event, n), self.ch5_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=6 :self.showCh(event, n), self.ch6_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=7 :self.showCh(event, n), self.ch7_L)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=8 :self.showCh(event, n), self.ch0_H)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=9 :self.showCh(event, n), self.ch1_H)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=10 :self.showCh(event, n), self.ch2_H)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=11 :self.showCh(event, n), self.ch3_H)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=12 :self.showCh(event, n), self.ch4_H)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=13 :self.showCh(event, n), self.ch5_H)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=14 :self.showCh(event, n), self.ch6_H)
        self.Bind(wx.EVT_TOGGLEBUTTON, lambda event, n=15 :self.showCh(event, n), self.ch7_H)
        # end wxGlade
        self.Bind(wx.EVT_CLOSE, self.on_close)

    def on_close(self, event):
        self.Hide()

    def __set_properties(self):
        # begin wxGlade: devFrame.__set_properties
        self.SetTitle(_("dev0"))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: devFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        grid_sizer_1 = wx.GridSizer(2, 8, 1, 1)
        sizer_1.Add(self.output0, 2, wx.EXPAND, 0)
        grid_sizer_1.Add(self.ch0_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch1_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch2_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch3_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch4_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch5_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch6_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch7_L, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch0_H, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch1_H, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch2_H, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch3_H, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch4_H, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch5_H, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch6_H, 1, wx.ALL | wx.EXPAND, 1)
        grid_sizer_1.Add(self.ch7_H, 1, wx.ALL | wx.EXPAND, 1)
        sizer_1.Add(grid_sizer_1, 1, wx.ALL, 1)
        self.SetSizer(sizer_1)
        sizer_1.Fit(self)
        self.Layout()
        # end wxGlade

    def showCh(self, event, n):  # wxGlade: devFrame.<event_handler>
        print "Event handler showCh for button%d\n"%(n)
        idx0 = n/8
        idx1 = n%8
        b = event.GetEventObject()
        st = b.GetValue()
        if st==0 :
            if self.C[n]!=None :
                self.C[n].Close()
            self.C[n] = -1
        else :
            self.C[n] = ROOT.TCanvas("ch"+str(n), "ch"+str(n), 800, 600)
            self.C[n].cd()
            if self.dev!=-1 :
                self.dev.hist[idx0][idx1].Draw()
                self.C[n].Modified()
                self.C[n].Update()


        event.Skip()

    def setDev(self, d):
        self.dev = d
        self.SetTitle(_(d.name))


# end of class devFrame
class devApp:
    #def OnInit(self):
    def __init__(self, n):
        #wx.InitAllImageHandlers()
        #dev0 = devFrame(None, wx.ID_ANY, "")
        #self.SetTopWindow(dev0)
        self.name = n;
        self.frame = -1
        self.th = [[0 for i in range(8)] for j in range(2)]
        self.hist = [[0 for i in range(8)] for j in range(2)]
        for idx0 in (0,1) :
            for idx1 in (0,1,2,3,4,5,6,7) :
                self.hist[idx0][idx1] = ROOT.TH1F(str(idx0*8+idx1), str(idx0*8+idx1), 4098, -1.5, 4096.5)
        
        #dev0.Show()
    
    def setFrame(self, f):
        self.frame = f

    def fillCh(self, n, v):
        idx0 = n/8
        idx1 = n%8
        self.hist[idx0][idx1].Fill(v)
        if self.frame!= -1:
            if (self.frame.C[n]!=-1) and (self.frame.C[n]!=None) :
                print "fill and update hist%d\n"%(n)
                self.frame.C[n].Modified()
                self.frame.C[n].Update()


# end of class devApp

if __name__ == "__main__":
    gettext.install("dev0") # replace with the appropriate catalog name

    dev0 = devApp(0)
    dev0.MainLoop()
